// HW8_Blake_RoutingAlgor.cpp

#include <iostream>
#include <fstream>

#include "LkList.cpp"
#include "distance_table.cpp"

using namespace std;

fstream outFile;

LkList ls1;


void creatertpkt(rtpkt *initrtpkt, int srcid, int destid, int mincosts[])
{
  int i;
  initrtpkt->sourceid = srcid;
  initrtpkt->destid = destid;

  for (i=0; i<4; i++)
     initrtpkt->mincost[i] = mincosts[i];
}  

/* possible events: */
#define  ADD_PACKET_INTO_EVENT     2
#define INFINITY 9999

float clocktime = 0.000;

float GenerateRandNr();
void printevlist();
void addPacketEvent(rtpkt packet);

void init();

void rtinit0();
void rtinit1();
void rtinit2();
void rtinit3();

int update0();
int update1();
int update2();
int update3();

void rtupdate0(rtpkt *rcvdpkt);
void rtupdate1(rtpkt *rcvdpkt);
void rtupdate2(rtpkt *rcvdpkt);
void rtupdate3(rtpkt *rcvdpkt);

void printdt0(distance_table *dtptr);
void printdt1(distance_table *dtptr);
void printdt2(distance_table *dtptr);
void printdt3(distance_table *dtptr);

void sendpkt0();
void sendpkt1();
void sendpkt2();
void sendpkt3();


distance_table dt0, dt1, dt2, dt3;

int lkcost0[4], lkcost1[4], lkcost2[4], lkcost3[4];	//  The link cost between router 0 and other routers
int spath0[4], spath1[4], spath2[4], spath3[4];     //  The shortest path between router 0 and other routers


////////////  main  /////////////
int main()
{
    cout << "HEY LOOK AT ME, I COMPILED.\n\n";
    cin.ignore();
   event *eventptr;

   outFile.open("outputFile.out", ios::out);

   init();
   
   while (1) 
   {  
        eventptr = ls1.evlist;        // get next event to simulate
        if (eventptr==NULL)
           goto terminate;
        ls1.evlist = ls1.evlist->next;    // remove this event from the lklist of events
        if (ls1.evlist!=NULL)
           ls1.evlist->prev=NULL;
        
        cout<<"\nMAIN: rcv event, t="<<eventptr->evtime<<" at router "<<eventptr->eventity<<endl;
        outFile<<"\nMAIN: rcv event, t="<<eventptr->evtime<<" at router "<<eventptr->eventity<<endl;

        if (eventptr->evtype == ADD_PACKET_INTO_EVENT) 
		{
			cout<<" src:"<<eventptr->rtpktptr->sourceid;
            cout<<" dest:"<<eventptr->rtpktptr->destid;
            cout<<" contents: "<<eventptr->rtpktptr->mincost[0]<<" "<<eventptr->rtpktptr->mincost[1];
            cout<<" "<<eventptr->rtpktptr->mincost[2]<<" "<<eventptr->rtpktptr->mincost[3];

			outFile<<" src:"<<eventptr->rtpktptr->sourceid;
            outFile<<" dest:"<<eventptr->rtpktptr->destid;
            outFile<<" contents: "<<eventptr->rtpktptr->mincost[0]<<" "<<eventptr->rtpktptr->mincost[1];
            outFile<<" "<<eventptr->rtpktptr->mincost[2]<<" "<<eventptr->rtpktptr->mincost[3];
        }

        clocktime = eventptr->evtime;    // update time to next event time

        if (eventptr->evtype == ADD_PACKET_INTO_EVENT) 
		{
            if (eventptr->eventity == 0) 
				rtupdate0(eventptr->rtpktptr);
			else if (eventptr->eventity == 1) 
				rtupdate1(eventptr->rtpktptr);
			else if (eventptr->eventity == 2) 
				rtupdate2(eventptr->rtpktptr);
			else if (eventptr->eventity == 3) 
				rtupdate3(eventptr->rtpktptr);
            else { cout<<"Panic: unknown event entity\n"; outFile<<"Panic: unknown event entity\n"; exit(0);}
	   }

      else
           { cout<<"Panic: unknown event type\n"; outFile<<"Panic: unknown event entity\n"; exit(0);}

      if (eventptr->evtype == ADD_PACKET_INTO_EVENT) 
          free(eventptr->rtpktptr);        // free memory for packet
      free(eventptr);                    // free memory for event struct

    }// end while
   

terminate:
   cout<<"\nEnd of the Dist. Vect. Routing Algor. at t="<< clocktime<<"; No more changes occured in the Routing Tables of all our routers!!!\n\n";
   outFile<<"\nEnd of the Dist. Vect. Routing Algor. at t="<< clocktime<<"; No more changes occured in the Routing Tables of all our routers!!!\n\n";
}

/////////  init()  /////////////////
void init()                       
{
  int i;
  float sum, avg;
  float f = GenerateRandNr();
  event *evptr;
  
   srand(9999);              
   sum = 0.0;               
   for (i=0; i<1000; i++)
       sum=sum+GenerateRandNr();    // GenerateRandNr() should be uniform in [0,1]
   avg = sum/1000.0;

   if (avg < 0.25 || avg > 0.75) 
   {
      cout<<"The random nr generated by your computer is different from one expected!\n"; 
      exit(1);
    }

   clocktime=0.0;  

   rtinit0();
   rtinit1();
   rtinit2();
   rtinit3();
}

//////////  GenerateRandNr()  ////////////////
float GenerateRandNr() 
{
  double mmm = 10000;  
  float x;                   

  x = (float)(rand()%10000+1)/mmm;  // x should be uniform in [0,1]

  return(x);
}  


////////////  print_events_lklist()  /////////////////
void printevlist()
{
  event *q;

  cout<<"--------------\nThe Events Linked-List:\n";

  for(q = ls1.evlist; q!=NULL; q=q->next)
  {
      cout<<"Event time: "<<q->evtime<<", type: "<<q->evtype<<" entity: "<<q->eventity<<endl;
  }

  printf("--------------\n");
}

//  addPacketEvent (adds packet into a new event, and adds this newly created event in the lklist of events)
void addPacketEvent(rtpkt packet)
{
 rtpkt *mypktptr;
 event *evptr, *q;
 float lastime;
 int i;

// make a copy of the packet 
 mypktptr = (rtpkt *) malloc(sizeof(rtpkt));
 mypktptr->sourceid = packet.sourceid;
 mypktptr->destid = packet.destid;

 for (i=0; i<4; i++)
    mypktptr->mincost[i] = packet.mincost[i];

  // create future event and include mypkt into it
    
  evptr = (event *)malloc(sizeof(event));
  evptr->evtype =  ADD_PACKET_INTO_EVENT;   
  evptr->eventity = packet.destid; 
  evptr->rtpktptr = mypktptr;       // save ptr to my copy of packet

// compute the time of packet. 
 lastime = clocktime;
 for (q=ls1.evlist; q!=NULL ; q = q->next)
    if ( (q->evtype==ADD_PACKET_INTO_EVENT  && q->eventity==evptr->eventity) ) 
      lastime = q->evtime;
 evptr->evtime =  lastime + 2.*GenerateRandNr();
   
 ls1.insertEventLklist(evptr);
} 

/*****************  router0.c  **********************/

///////////  rtinit0  //////////////
void rtinit0() 
{
	int i, j;
	cout<<"At time t="<<clocktime<<", rtinit0() called. \n";

	// initialize the link costs
	lkcost0[0] = 0;	lkcost0[1] = 1;	lkcost0[2] = 3;	lkcost0[3] = 7;

	//initialze the distance table of router 0; i denotes the destination router, j denotes the neighbour router
	for (i=0; i<4; i++)
		for (j=0; j<4; j++) {
			if (i==j)
				dt0.costs[i][j] = lkcost0[i];
			else
				dt0.costs[i][j] = INFINITY;
		}
		for (i=0; i<4; i++) 		// compute the shortest path
			spath0[i]=lkcost0[i];

		printdt0(&dt0);		// print distance table of router 0
		sendpkt0();			// make packet and send to other routers
}

//////////  rtupdate()  /////////////////
void rtupdate0(rtpkt *rcvdpkt)
{
	int i, j;
	j=rcvdpkt->sourceid;

	cout<<"At time t="<<clocktime<<", rtupdate0() called, and node 0 receives a packet from node "<<j<<endl;

	// update distance table of router 0
	for ( i= 0; i<4; i++) {
		dt0.costs[i][j] = lkcost0[j] + rcvdpkt->mincost[i];
		if (dt0.costs[i][j] > INFINITY)
			dt0.costs[i][j]=INFINITY;
	}
	printdt0(&dt0);				      // print distance table of router 0
	if (update0() == 1)	sendpkt0();	  // update shortest paths
}

/////////  printdt0()  /////////////////
void printdt0(distance_table *dtptr)
{
  cout<<"                via     \n";
  cout<<"   D0 |    1     2    3 \n";
  cout<<"  ----|-----------------\n";
  cout<<"     1|  "<<dtptr->costs[1][1]<<"   "<<dtptr->costs[1][2]<<"    "<<dtptr->costs[1][3]<<endl;
  cout<<"dest 2|  "<<dtptr->costs[2][1]<<"   "<<dtptr->costs[2][2]<<"    "<<dtptr->costs[2][3]<<endl;
  cout<<"     3|  "<<dtptr->costs[3][1]<<"   "<<dtptr->costs[3][2]<<"    "<<dtptr->costs[3][3]<<endl;

  outFile<<endl;
  outFile<<"                via     \n";
  outFile<<"   D0 |    1     2    3 \n";
  outFile<<"  ----|-----------------\n";
  outFile<<"     1|  "<<dtptr->costs[1][1]<<"   "<<dtptr->costs[1][2]<<"    "<<dtptr->costs[1][3]<<endl;
  outFile<<"dest 2|  "<<dtptr->costs[2][1]<<"   "<<dtptr->costs[2][2]<<"    "<<dtptr->costs[2][3]<<endl;
  outFile<<"     3|  "<<dtptr->costs[3][1]<<"   "<<dtptr->costs[3][2]<<"    "<<dtptr->costs[3][3]<<endl;
  outFile<<endl;
}

/////////  update0()  //////////////
int update0()
{
	int i, j;
	int tmp[4];
	int flag =0;

	for (i=0; i<4; i++) {	// compute new shortest paths
		tmp[i] = dt0.costs[i][0];
		for (j=1; j<4; j++) {
			if (tmp[i] > dt0.costs[i][j]) tmp[i] = dt0.costs[i][j];
		}

		if (tmp[i] != spath0[i] ) {
			// update shortest path
			spath0[i] = tmp[i];
			flag =1;
		}
	}
	return flag;
}

///////////  sendpkt0()  //////////////
void sendpkt0()
{
	int i;
	rtpkt packet;

	/*make  packet*/
	packet.sourceid = 0;
	for (i=0; i<4; i++) 
		packet.mincost[i] = spath0[i];

	/*send out packet*/
	packet.destid=1;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 0 sends packet to router 1 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 0 sends packet to router 1 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 

	packet.destid=2;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 0 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 0 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 

	packet.destid=3;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 0 sends packet to router 3 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 0 sends packet to router 3 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
}

/*****************  router1.c  **********************/

////////  rtinit1()  //////////////
void rtinit1() 
{
	int i, j;	
	printf("At time t=%.3f, rtinit1() called \n", clocktime);

	/* initialize the link costs */
	lkcost1[0] = 1;
	lkcost1[1] = 0;
	lkcost1[2] = 1;
	lkcost1[3] = INFINITY;

	/*initialze the distance table of router 1 
	i denotes the destination node, j denotes the neighbour node*/
	for (i=0; i<4; i++)
		for (j=0; j<4; j++) {
			if (i==j) 	dt1.costs[i][j] = lkcost1[i];
			else		dt1.costs[i][j] = INFINITY;
		}
		for (i=0; i<4; i++)	/* compute the shortest path*/
			spath1[i]=lkcost1[i];
		printdt1(&dt1);         /* print distance table */
		sendpkt1();		/*make packet and send it to other nodes*/
}

////////  rtupdate1  /////////////////
void rtupdate1(rtpkt *rcvdpkt)
{
	int i, j;

	j=rcvdpkt->sourceid;

	printf("At time t=%.3f, rtupdate1() called. node 1 receives a packet from node %d\n",clocktime, j);

	/* update distance table*/
	for ( i= 0; i<4; i++) {
		dt1.costs[i][j] = lkcost1[j] + rcvdpkt->mincost[i];
		if (dt1.costs[i][j] > INFINITY)
			dt1.costs[i][j]=INFINITY;
	}

	printdt1(&dt1);				/*print distance table*/
	if (update1() == 1)	sendpkt1(); 	/*update shortest paths*/
}

/////////////  printdt1  //////////////////
void printdt1(distance_table *dtptr)
{
  cout<<"             via     \n";
  cout<<"   D1 |    1     2\n";
  cout<<"  ----|-----------------\n";
  cout<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][2]<<endl;
  cout<<"dest 2|  "<<dtptr->costs[2][0]<<"   "<<dtptr->costs[2][2]<<endl;
  cout<<"     3|  "<<dtptr->costs[3][0]<<"   "<<dtptr->costs[3][2]<<endl;

  outFile<<endl;
  outFile<<"             via     \n";
  outFile<<"   D1 |    1     2\n";
  outFile<<"  ----|-----------------\n";
  outFile<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][2]<<endl;
  outFile<<"dest 2|  "<<dtptr->costs[2][0]<<"   "<<dtptr->costs[2][2]<<endl;
  outFile<<"     3|  "<<dtptr->costs[3][0]<<"   "<<dtptr->costs[3][2]<<endl;
  outFile<<endl;
}

///////////  update1  /////////////
int update1()
{
	int i, j;
	int tmp[4];
	int flag =0;

	/*compute new shortest paths*/
	for (i=0; i<4; i++) {
		tmp[i] = dt1.costs[i][0];
		for (j=1; j<4; j++) {
			if (tmp[i] > dt1.costs[i][j])
				tmp[i] = dt1.costs[i][j];
		}
		if (tmp[i] != spath1[i] ) {
			/*update shortest path*/
			spath1[i] = tmp[i];
			flag =1;
		}
	}
	return flag;
}

/////////////  sendpkt1  //////////////
void sendpkt1()
{
	int i;
	rtpkt packet;
	packet.sourceid = 1;	/*make  packet*/
	for (i=0; i<4; i++) 
		packet.mincost[i] = spath1[i];

	packet.destid=0;	/*send out packet*/
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 1 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 1 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 

	packet.destid=2;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 1 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 1 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
}

/*****************  router2.c  **********************/


//////////  rtinit2()  /////////////
void rtinit2()
{
	int i, j;
	printf("At time t=%.3f, rtinit2() called \n", clocktime);

	/* initialize the link costs */
	lkcost2[0] = 3;
	lkcost2[1] = 1;
	lkcost2[2] = 0;
	lkcost2[3] = 2;

	/*initialze the distance table 
	i denotes the destination node, j denotes the neighbour node*/
	for (i=0; i<4; i++)
		for (j=0; j<4; j++) {
			if (i==j)
				dt2.costs[i][j] = lkcost2[i];
			else
				dt2.costs[i][j] = INFINITY;
		}

		/* compute the shortest path*/
		for (i=0; i<4; i++)	spath2[i]=lkcost2[i];
		printdt2(&dt2);		/* print distance table */
		sendpkt2();             /*make packet and send it to other nodes*/
}

///////////  rtupdate2()  /////////////////
void rtupdate2(rtpkt *rcvdpkt)
{
	int i, j;
	j=rcvdpkt->sourceid;
	printf("At time t=%.3f, rtupdate2() called. node 2 receives a packet from node %d\n",
		clocktime, j);

	/* update distance table*/
	for ( i= 0; i<4; i++) {
		dt2.costs[i][j] = lkcost2[j] + rcvdpkt->mincost[i];
		if (dt2.costs[i][j] > INFINITY)
			dt2.costs[i][j]=INFINITY;
	}

	printdt2(&dt2);			/*print distance table*/

	if (update2() == 1)	/*update shortest paths*/
		sendpkt2();
}

///////////  printdt2  ///////////////////////
void printdt2(distance_table *dtptr)
{
  cout<<"                via     \n";
  cout<<"   D2 |    0     1    3 \n";
  cout<<"  ----|-----------------\n";
  cout<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][1]<<"    "<<dtptr->costs[0][3]<<endl;
  cout<<"dest 1|  "<<dtptr->costs[1][0]<<"   "<<dtptr->costs[1][1]<<"    "<<dtptr->costs[1][3]<<endl;
  cout<<"     3|  "<<dtptr->costs[3][0]<<"   "<<dtptr->costs[3][1]<<"    "<<dtptr->costs[3][3]<<endl;

  outFile<<endl;
  outFile<<"                via     \n";
  outFile<<"   D2 |    0     1    3 \n";
  outFile<<"  ----|-----------------\n";
  outFile<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][1]<<"    "<<dtptr->costs[0][3]<<endl;
  outFile<<"dest 1|  "<<dtptr->costs[1][0]<<"   "<<dtptr->costs[1][1]<<"    "<<dtptr->costs[1][3]<<endl;
  outFile<<"     3|  "<<dtptr->costs[3][0]<<"   "<<dtptr->costs[3][1]<<"    "<<dtptr->costs[3][3]<<endl;
  outFile<<endl;
}

/////////  update2  //////////////////
int update2()
{
	int i, j;
	int tmp[4];
	int flag =0;

	/*compute new shortest paths*/
	for (i=0; i<4; i++) {
		tmp[i] = dt2.costs[i][0];

		for (j=1; j<4; j++) {
			if (tmp[i] > dt2.costs[i][j])
				tmp[i] = dt2.costs[i][j];
		}
		if (tmp[i] != spath2[i] ) { 	/*update shortest path*/
			spath2[i] = tmp[i];
			flag =1;
		}
	}
	return flag;
}

//////////  sendpkt2  /////////////
void sendpkt2()
{
	int i;
	rtpkt packet;
	packet.sourceid = 2;	/*make  packet*/
	for (i=0; i<4; i++) 
		packet.mincost[i] = spath2[i];
	
	/*send out packet*/
	packet.destid=0;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 2 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 2 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
	
	packet.destid=1;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 2 sends packet to router 1 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 2 sends packet to router 1 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
	
	packet.destid=3;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 2 sends packet to router 3 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 2 sends packet to router 3 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
}

/*****************  router3.c  **********************/


/////////////  rtinit3()  ////////////////
void rtinit3() 
{
	int i, j;	
	printf("At time t=%.3f, rtinit3() called. \n", clocktime);

	/* initialize the link costs */
	lkcost3[0] = 7;
	lkcost3[1] = INFINITY;
	lkcost3[2] = 2;
	lkcost3[3] = 0;

	// initialze the distance table; i denotes the destination node, j denotes the neighbour node
	for (i=0; i<4; i++)
		for (j=0; j<4; j++) {
			if (i==j)
				dt3.costs[i][j] = lkcost3[i];
			else
				dt3.costs[i][j] = INFINITY;
		}
		
		for (i=0; i<4; i++) /* compute the shortest path*/
			spath3[i]=lkcost3[i];

		printdt3(&dt3);		/* print distance table */
		sendpkt3();		/*make packet and send it to other nodes*/
}

/////////  rtupdate3()  /////////////////////
void rtupdate3(rtpkt *rcvdpkt)
{
	int i, j;
	j=rcvdpkt->sourceid;
	printf("At time t=%.3f, rtupdate3() called. node 3 receives a packet from node %d\n",
		clocktime, j);

	/* update distance table*/
	for ( i= 0; i<4; i++) {
		dt3.costs[i][j] = lkcost3[j] + rcvdpkt->mincost[i];
		if (dt3.costs[i][j] > INFINITY)
			dt3.costs[i][j]=INFINITY;
	}
	printdt3(&dt3);			/*print distance table*/
	if (update3() == 1)	/*update shortest paths*/
		sendpkt3();
}

//////////  printdt3  //////////////////////
void printdt3(distance_table *dtptr)
{
  cout<<"             via     \n";
  cout<<"   D3 |    0     2   \n";
  cout<<"  ----|-----------------\n";
  cout<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][2]<<endl;
  cout<<"dest 1|  "<<dtptr->costs[1][0]<<"   "<<dtptr->costs[1][2]<<endl;
  cout<<"     2|  "<<dtptr->costs[2][0]<<"   "<<dtptr->costs[2][2]<<endl;

  outFile<<endl;
  outFile<<"             via     \n";
  outFile<<"   D3 |    0     2   \n";
  outFile<<"  ----|-----------------\n";
  outFile<<"     0|  "<<dtptr->costs[0][0]<<"   "<<dtptr->costs[0][2]<<endl;
  outFile<<"dest 1|  "<<dtptr->costs[1][0]<<"   "<<dtptr->costs[1][2]<<endl;
  outFile<<"     2|  "<<dtptr->costs[2][0]<<"   "<<dtptr->costs[2][2]<<endl;
  outFile<<endl;
}

///////////  update3  //////////////////
int update3()
{
	int i, j;
	int tmp[4];
	int flag =0;

	/*compute new shortest paths*/
	for (i=0; i<4; i++) {
		tmp[i] = dt3.costs[i][0];
		for (j=1; j<4; j++) {
			if (tmp[i] > dt3.costs[i][j])
				tmp[i] = dt3.costs[i][j];
		}
		if (tmp[i] != spath3[i] ) {
			/*update shortest path*/
			spath3[i] = tmp[i];
			flag =1;
		}
	}
	return flag;
}

///////////  sendpkt3  ///////////////
void sendpkt3()
{
	int i;
	rtpkt packet;

	/*make  packet*/
	packet.sourceid = 3;
	for (i=0; i<4; i++) 
		packet.mincost[i] = spath3[i];

	/*send out packet*/
	packet.destid=0;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 3 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 3 sends packet to router 0 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
	
	packet.destid=2;
	addPacketEvent(packet);
cout<<"At time t="<<clocktime<<", router 3 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl;
outFile<<"At time t="<<clocktime<<", router 3 sends packet to router 2 with: "<<packet.mincost[0]<<" "<<packet.mincost[1]<<" "<<packet.mincost[2]<<" "<<packet.mincost[3]<<endl; 
}

